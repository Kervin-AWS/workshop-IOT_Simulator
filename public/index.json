[
{
	"uri": "/",
	"title": "AWS 物联网设备模拟器解决方案",
	"tags": [],
	"description": "",
	"content": "本部署指南讨论了在云上部署物联网设备模拟器的架构注意事项和配置步骤。\n"
},
{
	"uri": "/910_conclusion/conclusion/",
	"title": "我们收获了什么",
	"tags": [],
	"description": "",
	"content": "我们收获了:\n Deployed an application consisting of microservices Deployed the Kubernetes Dashboard Deployed packages using Helm Deployed a centralized logging infrastructure Configured Automatic scaling of our pods and worker nodes  "
},
{
	"uri": "/020_hands_on_guide/prerequest/",
	"title": "准备工作",
	"tags": [],
	"description": "",
	"content": "在使用 CloudFormation 进行部署前，需要提前准备如下两项工作:\n 创建认证   获取 Mapbox Token   "
},
{
	"uri": "/010_introduction/",
	"title": "系统架构",
	"tags": [],
	"description": "",
	"content": "系统架构 架构图与资源\n欢迎来到AWS IOT模拟解决方案 Workshop!\n该解决方案提供了基于 Web 的图形用户界面（GUI）控制台，使您能够创建和模拟数百个连接的设备，而无需配置和管理物理设备或开发耗时的脚本。\n该解决方案旨在开箱即用，或者可以将此解决方案用作参考架构实现，以针对特定的使用场景构建自定义仿真引擎。\n该解决方案提供了一个控制台，使用户可以以用户定义的设备类型构建大量虚拟设备，并模拟将数据定时发布到物联网平台的场景。\n您还可以使用该模拟器进行设备的监控，并能详细地观察到后端其它服务如何处理相关数据。\n我们将从以下几个方面展开：  架构描述   组件介绍   "
},
{
	"uri": "/020_hands_on_guide/",
	"title": "部署说明",
	"tags": [],
	"description": "",
	"content": "部署说明 本章节将逐步带领您实现AWS 物联网模拟器解决方案的部署。\n我们将分别从以下步骤进行部署：\n 准备工作   快速部署   系统使用   "
},
{
	"uri": "/020_hands_on_guide/prerequest/authing/",
	"title": "创建认证",
	"tags": [],
	"description": "",
	"content": "需要注册申请 Authing 账户\n需要在 https://authing.cn/ 进行新账户的注册申请。\n新建用户池 当注册成功并进入 Authing.cn 后，点击左侧菜单栏中的 【用户池列表\u0026gt;新建用户池】 菜单。 根据下列示例信息创建新的用户池。请注意填写一个唯一的用户池名称。有可能有的用户池名称已经被占用。\n用户池名称： iotsimulation\n用户池域名： iotsimulation\n选择你的用户池类型： Web-Web Application\n具体截图如下：\n新建第三方登录-OIDC 应用 新建用户池后，进入用户池(例如：iot-simulation)。选择 “第三方登录”-\u0026gt;“OIDC 应用菜单” -\u0026gt;“创建 OIDC 应用”\n具体字段填写信息如下：\n应用名：输入自定义的应用名称（例如： iotsimulation） 认证地址：输入自定义的应用名称（例如： iotsimulation） 回调地址 URL：输入 \u0026quot; http://127.0.0.1:4200 \u0026ldquo;。 请注意，该值会在 IoT device Simulator 部署后会使用 Cloudformation 的输出值进行替换，如果不替换，将无法实现用户认证成功后系统自动跳转的功能。\n 授权模式：选择 authorization_code, refresh_token, authingToken 单选框。 返回类型：选择 Code 单选框 Token 换取时认证方式： 选择 Client_secret_post 单选框。 id_token 签名算法： 选择 RS256 单选框。 高级选项 》 自定义 RSA 签名密钥， 点击随机生成签名密钥。例如 其他值保持默认值，点击 “确定” 按钮。\n生成 OIDC 应用。 点击已授权应用。信息如下所示。（注意：仅为示例，真实值请根据自己创建的 OIDC 应用进行填写） 请留意如下字段，如下字段中对应的值要在以后的步骤中被使用到。\n App ID App Secret Issuer 应用名 认证地址 回调 URL 签名密钥  创建测试用户 该测试用户将用于整个解决方案的功能演示。选择右侧的【用户中心】-》“创建用户”按钮。 输入用户名，邮箱，密码和确认密码。该用户名及密码将用于 IoT Device Simulator 的登录界面。 创建成功后，所创建的新用户会出现在当前用户列表中。如下图所示，用户名为 test 的用户已经被成功创建。 "
},
{
	"uri": "/010_introduction/architecture/",
	"title": "架构描述",
	"tags": [],
	"description": "",
	"content": "AWS CloudFormation 模板部署了设备模拟器 API，该 API 利用 Amazon API Gateway 调用 AWS Lambda 函数。这些 Lambda 函数提供了用于在虚拟设备和设备类型上执行数据 CRUD 操作，记录相关模拟指标以及执行管理任务的业务逻辑。这些Lambda 函数与 Amazon Simple Storage Service（Amazon S3），Amazon DynamoDB，AWS 身份和访问管理（IAM）和 Amazon CloudWatch Logs 交互以提供数据存储，管理和日志记录功能。\n该解决方案还部署了一个包含两个公共子网和两个的私有子网的 Amazon VPC 网络拓扑。该模拟器引擎在由 AWS Fargate 提供的 Amazon Elastic Container Service（Amazon ECS）容器中运行。 同时 VPC 还包括一个 NAT 网关。\n该解决方案创建一个 Web 控制台，并将其部署到配置了静态网站托管的 Amazon S3存储桶中。关于用户认证的部分，本方案使用 Authing（https://authing.cn/ ）作为 OpenID 的提供商， Cognito Identity pool 支持将身份与通过 IAM 配置的 OpenID Connect 提供商相关联，得到 ID 令牌，从而实现对控制台和设备模拟器 API 的访问控制。\n首先需要进入系统，点击登录按钮后，系统会转向到 authing.cn 并提示输入用户和密码。当输入正确的用户名和密码后，进入到主 页面。\n业务逻辑方面，当设备模拟器 API 收到授权请求时，Amazon API Gateway 会调用相应的 Lambda 函数。 Lambda 函数将执行结果返回给 API，API 将结果返回给模拟器控制台。收到设备模拟请求后，设备微服务会将请求发送到 Amazon Simple Queue Service（Amazon SQS）中的模拟队列。仿真引擎轮询仿真队列以获取仿真开始和停止请求。\n最后，当收到启动物联网设备请求后，系统将基于该请求生成虚拟设备。并在设备类型定义中的持续时间内，开始将模拟数据发布到已定义的 AWS IoT 端点。当用户每次点击该设备的启动按钮，所对应的模拟设备就会开始运行，直到定义的执行持续时间到期或收到停止请求为止。当收到停止模拟请求后，系统将根据该请求停止设备模拟，并在当前设备列表中所对应的设备进行状态更新。\n"
},
{
	"uri": "/020_hands_on_guide/launchstack/",
	"title": "快速部署",
	"tags": [],
	"description": "",
	"content": "本文的步骤主要针对在运行在由西云数据运营的 AWS（宁夏）区域或由光环新网运营的 AWS（北京）区域中的 IoT Device Simulator 解决方案，您可以使用以下链接快速启动一个 CloudFormation 堆栈来部署和管理整个方案：\n点击启动堆栈\n开始启动堆栈 点击宁夏和北京区域链接，打开 AWS 管理控制台（如果还没登录会先跳转到登录页面，登录后进入模板启动页面）。默认情况下，此模板在宁夏区域启动，您同时可以使用控制台右上方的区域选择链接，以在其他区域部署该方案。 配置启动参数 点击下一步，进入详细参数的配置页面\n配置示例如下：\n下表展示的是每一项参数的含义及默认值。请注意：以下所有的值都为必填值。\n   参数 默认 描述     AuthingThumbPrint Yes Authing 指纹，请保持默认值e6a3b45b062d509b3382282d196efe97d5956ccb   AuthingAppUrl No 请输入 Authing OIDC 应用中对应的 “Issue” 字段值，例如https://iotsimulation.authing.cn/oauth/oidc   AuthingAppOidc No 请输入输入 Authing OIDC 应用中对应的 “Issue” 字段值中**去掉 “https\u0026rdquo;**的部分，例如 iotsimulation.authing.cn/oauth/oidc   AuthingAppId No 请输入 Authing OIDC 应用中对应的 “App ID” 字段值，例如 5e9420f3b16cc8e2a51c1868   AuthingAppName No 请输入 Authing OIDC 应用中对应的 “应用名” 字段值，例如 iotsimulation   AuthingAppSecret No 请输入 Authing OIDC 应用中对应的 “App Secret” 字段值，例如 a2d5eba65b1b614a50db1ade61f50e4b   AuthingRSAsignature No 请输入 Authing OIDC 应用中对应的 “签名密钥” 字段值，例如 { \u0026ldquo;n\u0026rdquo;: \u0026ldquo;zTAIwLfWzymVYGK5oywDJnqrq8pbMIQAQVYQEtGC YiDct8nknbtvqHg3N31O3n-vhOOIZE26Ybg3dnlN__I5UDjLmSY_cl_Nusvxs3XZFzw pCuSyLzirZ3MT43HLP8HFV3iCeCgN3mNwDO3xJcnqX KzMmLSgNOmSxLdThKXh1a4_TC5gtbT-qmeO1S0yyDD5HNKvgAsRUl6BFXKY3LS-3o2gT9uWwyeX_PeTXtbSebU4Tya1UwMuzlDxvT3kb HRv7zDuVhG5ypBiEXnO04AGeUUAUd5PnuwQum8v1 mMCmelcw0oKoMcwTuImCTIhWbPTg_blI8EVFOtvRi mAOm8l7Q\u0026rdquo;, \u0026ldquo;e\u0026rdquo;: \u0026ldquo;AQAB\u0026rdquo;,\u0026ldquo;use\u0026rdquo;: \u0026ldquo;sig\u0026rdquo;, \u0026ldquo;alg\u0026rdquo;: \u0026ldquo;RS256\u0026rdquo;, \u0026ldquo;kid\u0026rdquo;: \u0026ldquo;jjtRhZbXxUmh5ZTCOsD0YpOrM0AyQdoC8xsyfhjLSQ 0\u0026rdquo;,\u0026ldquo;kty\u0026rdquo;: \u0026ldquo;RSA\u0026rdquo;}   MapxToken No 请输入 Mapx Token 值，例如 pk.eyJ1IjoiY2h1bmh1YXYiLCJhIjoiY2s2OHo3xxxxxxxxx xxxxxxxx    具体参数输入示例：\n参数设置完成后，点击下一步。在本步骤中请确保堆栈选项保留默认值。直接点击下一步。 授权 IAM 并创建堆栈 在最后的审核页面中，勾选最下方的【我确认，AWS CloudFormation 可能创建 IAM资源。】选择框。接下来点击【创建堆栈】，开始堆栈的创建。 等待堆栈创建成功 您可以在 AWS CloudFormation 控制台的【状态】列中查看堆栈的状态，并点击右上方的刷新按钮更新状态。大约五分钟内，您可以看到堆栈状态变为CREATE_COMPLETE，此时堆栈创建成功。 查看堆栈资源 堆栈创建后，点击【资源】标签，可以看到这个堆栈启动的所有资源。 查看堆栈输出参数 点击堆栈的【输出】 tab 页，可以看到该堆栈的输出参数。其中 “NeedToUpdateAUthingCallBackURL” 的输出值需要使用。 更新 authing 中的 Redirect URL 堆栈创建完成后，点击 CloudFormation 中对应的堆栈的“输出”标签页。\n 复制 “NeedToUpdateAUthingCallBackURL”中对应的值，例如 \u0026quot; http://iotsim73-iotsimwebsitebucket-mmpj7mzz94ai.s3-website.cn-north-1.amazonaws.com.cn/home/login \u0026quot; 需要在 Authing 网站中进行相应的更新。\n 登录Authing.cn 网站，点击左侧的 用户池列表中您创建的用户池。 在右侧点击【第三方登录】-》【OIDC 应用】: 例如 Iotsimulation 用户池 选择 【回调 URL】 进行更新。请确保多个回调 URL 使用“;”进行分割。示例如下 "
},
{
	"uri": "/020_hands_on_guide/howtouse/",
	"title": "系统使用",
	"tags": [],
	"description": "",
	"content": "登录 物联网设备模拟器的 web 控制台 点击 CloudFormation 中对应堆栈的“输出”标签页中的 ManagementConsole 字段值，例如 http://iotsim73-iotsimwebsitebucket-mmpj7mzz94ai.s3-website.cn-north-1.amazonaws.com.cn/\n输入本指南中【部署说明】- \u0026gt; 【Authing】 -\u0026gt; 【创建测试用户】部分中所创建用户的用户名和密码。 点击【登录】后, 会进入到 物联网设备模拟器 的主界面。\n登录主界面 登录后，显示首页界面如下 仪表板 该界面显示 我的设备数量等信息。 我的设备 显示当前所有模拟设备列表及状态。 物联网设备模拟 设备类型用于定义模拟物联网设备将发送的数据类型。 物联网设备模拟器控制台可帮助您更轻松地管理设备类型。 使用控制台，您可以查看和编辑设备类型。\n要查看您的设备类型，请导航到物联网设备模拟器控制台。 在导航窗格中，选择“设备类型”。 与您的帐户关联的所有设备类型的列表将显示在“设备类型”页面上。 要查看特定设备类型的详细信息，请在“设备类型”页面上找到适用的设备类型，然后选择“编辑”。 这显示了设备类型定义详细信息，包括名称，可见性，数据主题，数据传输持续时间和间隔以及消息有效负载。 要编辑设备类型，请更改适用的值。 您还可以从消息有效负载中删除现有属性或向消息有效负载中添加新属性。 选择保存以保存更改，或选择取消中止更改。\n使用步骤 使用此过程定义每个模拟的 IoT 设备将发送的数据。 为有效负载中的每个项目创建数据的结构以及特定的属性和类型。\n 登录物联网设备模拟器控制台，然后在导航窗格中，选择“设备类型”。 点击 “+添加设备类型” 按钮。 在“设备类型定义”页面上，输入适当的信息。 要格式化有效载荷，请选择 “增加属性”。 在“消息属性”窗口中，输入适当的属性数据类型。 选择提交。 对设备有效载荷的每个属性重复步骤 4-6。 选择保存。  设备类型界面 创建通用设备 创建模拟的物联网设备。\n 使用此过程定义将启动的模拟物联网设备。 在“ 物联网设备模拟器”控制台页面上的导航菜单中，选择“通用设备”。 选择 “+新增通用设备” 按钮。 在“新增通用设备”窗口中，指定设备类型和要启动的设备的数量。 您一次最多可以创建 100 个设备。 选择提交。  通用设备已被成功添加。 点击 “启动” 按钮，启动设备模拟。\n实时显示 物联网设备状态及 MQTT 消息 点击 【通用设备】-\u0026gt; 【启动】按钮 设备启动后，点击 【查看】按钮 显示当前设备正在运行，并且实时显示 MQTT 主题(Topic) 的消息。\n汽车模拟 另外该方案还包括汽车模拟模块，您可以使用该模块使用预定义的汽车类型来模拟车辆遥测数据。\n增加车辆 点击 左侧【汽车】进入 【我的车队】 点击 【增加车辆】按钮 提交后，新的车辆增加到 车辆列表中。 查看车辆 点击 【查看】按钮，显示 车辆详细信息。界面信息不仅包括车辆当前行驶位置，并且也包含类似 节流阀，速度，发动机转速，机油温度，传递扭矩，汽油表，行驶里程，变速箱等详细信息及仪表盘。同时类似于地图及仪表盘的数值随着汽车的移动而实时变化。 按照上述步骤，已经成功部署该方案及主要功能演示。\n"
},
{
	"uri": "/tabs-example/tabs/eksctl/",
	"title": "Launch EKS",
	"tags": [],
	"description": "",
	"content": "To create a basic EKS cluster, run:\neksctl create cluster --name=eksworkshop-eksctl --nodes=3 --node-ami=auto --region=${AWS_REGION}  Launching EKS and all the dependencies will take approximately 15 minutes\n "
},
{
	"uri": "/020_hands_on_guide/prerequest/mapboxtoken/",
	"title": "获取 Mapbox Token",
	"tags": [],
	"description": "",
	"content": "关于汽车在地图上位置的实时更新功能也是本模块所具有的功能，所使用的地图是利用 Mapbox 所提供的服务。 该功能的前提需要您注册一个免费的 Mapbox 开发人员帐户，并获得 访问令牌 (Access Token)。\n申请新账户链接 请到如下的网站进行账户的开通 https://account.mapbox.com/auth/signin/\n获得 Access Token 新账户申请成功后，需要创建新的 Access Token, 具体操作如图所示。 并获得访问 Mapx 服务的 Token，例如 pk.eyJ1IjoiY2h1bmh1YXYiLCJhIjoiY2s2OHo3xxxxxxxxxbjNkeWZwYjQ4dSJ9.nDexx xxxxxxxx\n"
},
{
	"uri": "/910_conclusion/whatsnext/",
	"title": "下一步是什么",
	"tags": [],
	"description": "",
	"content": " 下一步我们将部署车联网解决方案，并将本实验中模拟的汽车数据作为车联网的数据源。  点击进入车联网Lab\n"
},
{
	"uri": "/010_introduction/basics/",
	"title": "组件介绍",
	"tags": [],
	"description": "",
	"content": "本小节将介绍解决方案中的组件，我们将从以下模块展开:\n设备模拟器模块 物联网设备模拟器微服务是一系列 AWS Lambda 函数，为所有设备模拟操作提供业务逻辑和数据访问层。每个 Lambda 函数都采用 AWS 身份和访问管理(IAM)角色，具有最少的特权访问(所需的最低权限)来执行其指定的功能。\n管理模块 Lambda 函数 iot-sim-admin-service 处理发送到 /admin/* API 端点的设备模拟器API 请求。所有 /admin/ * 的 API 端点都配置为 Lambda 代理端点，将完整的请求有效负载转发至 iot-sim-admin-service 函数。\n度量指标模块 Lambda 函数 iot-simple-metrics-service 处理发送到 /metrics/* API 端点的设备模拟器 API 请求。所有/metrics/* 的 API 端点都被配置为 Lambda proxy 端点 ，将完整的请求有效负载转发给 iot- simple-metrics-service 函数。度量指标模块处理物联网设备模拟器的所有度量指标操作。\n设备管理模块 Lambda 函数 iot-sim-device-service 处理发送到 /device/* 端点的设备模拟器 API请求。所有 /device/* API 端点都配置为 Lambda proxy 端点，将完整的请求有效负载传递给 iot-sim-device-service 函数。设备管理模块所有设备和设备类型操作，包括设备列表、添加设备、删除设备、列表设备类型、添加设备类型、更新设备类型、启动模拟和停止模拟等操作。\n设备仿真模块 本方案利用 Amazon Simple Queue Service（Amazon SQS），Amazon Elastic Container Service（Amazon ECS）和 AWS Fargate 来模拟将数据发送到 AWS IoT终端节点的虚拟设备。 用户通过该解决方案附带的 Web 控制台发出模拟请求。 系统将模拟请求添加到存储到 Amazon SQS 队列中，直到将其处理为止。 AWS Fargate 及 Amazon ECS 容器包含一个模拟引擎，该引擎会定期轮询模拟队列以获取模拟请求。 模拟引擎将启动虚拟设备，然后启动设备将模拟数据发布到 AWS IoT终端节点。 在到达指定的持续时间之后，模拟引擎将停止模拟，终止虚拟设备，并更新 iot-sim-device-widgets DynamoDB 表中的设备状态和指标。\n汽车模拟模块 另外该方案还包括汽车模拟模块，您可以使用该模块使用预定义的汽车类型来模拟车辆遥测数据。 该遥测数据来自动力总成仿真模型所生成的仿真数据。关于汽车在地图上位置的实时更新功能也是本模块所具有的功能，所使用的地图是利用 Mapbox 所提供的服务。 该功能的前提需要您注册一个免费的 Mapbox 开发人员帐户，并获得 访问令牌 (Access Token)。 在注册后，需要将该 Mapbox 访问令牌添加到 IoT 设备模拟器。\n认证模块 该模块利用 Authing.cn 所提供的身份验证功能。 在用户身份验证成功后，Authing.cn将发布一个 JSON Web Token (JWT) ，该令牌用于允许控制台将请求提交到设备模拟器API。 控制台将 HTTPS 请求与包含 JWT 令牌的授权标头一起发送到模拟器 API。\nDynamoDB 表 该方案使用 Amazon DynamoDB 表保存设备，设备类型，设置和度量指标，以及相关的元数据。\n"
},
{
	"uri": "/910_conclusion/",
	"title": "总结与展望",
	"tags": [],
	"description": "",
	"content": "Conclusion "
},
{
	"uri": "/tabs-example/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Tabs with regular text:  Tab 1 Tab 2  echo \"This is tab 1.\"  println \"This is tab 2.\"   $(function(){$(\"#tab\").tabs();}); Tabs with code blocks:  Tab 1 Tab 2  echo \u0026#34;This is tab 1.\u0026#34;   println \u0026#34;This is tab 2.\u0026#34;    $(function(){$(\"#tab_with_code\").tabs();}); Tabs showing installation process:  eksctl terraform cloudformation  To create a basic EKS cluster, run:\neksctl create cluster --name=eksworkshop-eksctl --nodes=3 --node-ami=auto --region=${AWS_REGION}  Launching EKS and all the dependencies will take approximately 15 minutes\n  We start by initializing the Terraform state:\nterraform init We can now plan our deployment:\nterraform plan -var 'cluster-name=eksworkshop-tf' -var 'desired-capacity=3' -out eksworkshop-tf And if we want to apply that plan:\nterraform apply \u0026quot;eksworkshop-tf\u0026quot;  Applying the fresh terraform plan will take approximately 15 minutes\n  To build the EKS cluster, we need to tell the EKS service which IAM Service role to use, and which Subnets and Security Group to use. We can gather this information from our previous labs where we built the IAM role and VPC:\nexport SERVICE_ROLE=$(aws iam get-role --role-name \u0026quot;eks-service-role-workshop\u0026quot; --query Role.Arn --output text) export SECURITY_GROUP=$(aws cloudformation describe-stacks --stack-name \u0026quot;eksworkshop-cf\u0026quot; --query \u0026quot;Stacks[0].Outputs[?OutputKey=='SecurityGroups'].OutputValue\u0026quot; --output text) export SUBNET_IDS=$( aws cloudformation describe-stacks --stack-name \u0026quot;eksworkshop-cf\u0026quot; --query \u0026quot;Stacks[0].Outputs[?OutputKey=='SubnetIds'].OutputValue\u0026quot; --output text) Let\u0026rsquo;s confirm the variables are now set in our environment:\necho SERVICE_ROLE=${SERVICE_ROLE} echo SECURITY_GROUP=${SECURITY_GROUP} echo SUBNET_IDS=${SUBNET_IDS} Now we can create the EKS cluster:\naws eks create-cluster --name eksworkshop-cf --role-arn \u0026quot;${SERVICE_ROLE}\u0026quot; --resources-vpc-config subnetIds=\u0026quot;${SUBNET_IDS}\u0026quot;,securityGroupIds=\u0026quot;${SECURITY_GROUP}\u0026quot;  Cluster provisioning usually takes less than 10 minutes.\n You can query the status of your cluster with the following command:\naws eks describe-cluster --name \u0026quot;eksworkshop-cf\u0026quot; --query cluster.status --output text When your cluster status is ACTIVE you can proceed.\n  $(function(){$(\"#tab_installation\").tabs();}); Second set of tabs showing installation process:  eksctl terraform cloudformation  To create a basic EKS cluster, run:\neksctl create cluster --name=eksworkshop-eksctl --nodes=3 --node-ami=auto --region=${AWS_REGION}  Launching EKS and all the dependencies will take approximately 15 minutes\n  We start by initializing the Terraform state:\nterraform init We can now plan our deployment:\nterraform plan -var 'cluster-name=eksworkshop-tf' -var 'desired-capacity=3' -out eksworkshop-tf And if we want to apply that plan:\nterraform apply \u0026quot;eksworkshop-tf\u0026quot;  Applying the fresh terraform plan will take approximately 15 minutes\n  To build the EKS cluster, we need to tell the EKS service which IAM Service role to use, and which Subnets and Security Group to use. We can gather this information from our previous labs where we built the IAM role and VPC:\nexport SERVICE_ROLE=$(aws iam get-role --role-name \u0026quot;eks-service-role-workshop\u0026quot; --query Role.Arn --output text) export SECURITY_GROUP=$(aws cloudformation describe-stacks --stack-name \u0026quot;eksworkshop-cf\u0026quot; --query \u0026quot;Stacks[0].Outputs[?OutputKey=='SecurityGroups'].OutputValue\u0026quot; --output text) export SUBNET_IDS=$( aws cloudformation describe-stacks --stack-name \u0026quot;eksworkshop-cf\u0026quot; --query \u0026quot;Stacks[0].Outputs[?OutputKey=='SubnetIds'].OutputValue\u0026quot; --output text) Let\u0026rsquo;s confirm the variables are now set in our environment:\necho SERVICE_ROLE=${SERVICE_ROLE} echo SECURITY_GROUP=${SECURITY_GROUP} echo SUBNET_IDS=${SUBNET_IDS} Now we can create the EKS cluster:\naws eks create-cluster --name eksworkshop-cf --role-arn \u0026quot;${SERVICE_ROLE}\u0026quot; --resources-vpc-config subnetIds=\u0026quot;${SUBNET_IDS}\u0026quot;,securityGroupIds=\u0026quot;${SECURITY_GROUP}\u0026quot;  Cluster provisioning usually takes less than 10 minutes.\n You can query the status of your cluster with the following command:\naws eks describe-cluster --name \u0026quot;eksworkshop-cf\u0026quot; --query cluster.status --output text When your cluster status is ACTIVE you can proceed.\n  $(function(){$(\"#more_tab_installation\").tabs();}); "
},
{
	"uri": "/tabs-example/tabs/",
	"title": "Embedded tab content",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/authors/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": "Thanks to our wonderful contributors for making Open Source a better place! Please go to Contributors page to checkout authors for this Workshop\n"
},
{
	"uri": "/tabs-example/tabs/eks/",
	"title": "Embedded tab content",
	"tags": [],
	"description": "",
	"content": "To build the EKS cluster, we need to tell the EKS service which IAM Service role to use, and which Subnets and Security Group to use. We can gather this information from our previous labs where we built the IAM role and VPC:\nexport SERVICE_ROLE=$(aws iam get-role --role-name \u0026quot;eks-service-role-workshop\u0026quot; --query Role.Arn --output text) export SECURITY_GROUP=$(aws cloudformation describe-stacks --stack-name \u0026quot;eksworkshop-cf\u0026quot; --query \u0026quot;Stacks[0].Outputs[?OutputKey=='SecurityGroups'].OutputValue\u0026quot; --output text) export SUBNET_IDS=$( aws cloudformation describe-stacks --stack-name \u0026quot;eksworkshop-cf\u0026quot; --query \u0026quot;Stacks[0].Outputs[?OutputKey=='SubnetIds'].OutputValue\u0026quot; --output text) Let\u0026rsquo;s confirm the variables are now set in our environment:\necho SERVICE_ROLE=${SERVICE_ROLE} echo SECURITY_GROUP=${SECURITY_GROUP} echo SUBNET_IDS=${SUBNET_IDS} Now we can create the EKS cluster:\naws eks create-cluster --name eksworkshop-cf --role-arn \u0026quot;${SERVICE_ROLE}\u0026quot; --resources-vpc-config subnetIds=\u0026quot;${SUBNET_IDS}\u0026quot;,securityGroupIds=\u0026quot;${SECURITY_GROUP}\u0026quot;  Cluster provisioning usually takes less than 10 minutes.\n You can query the status of your cluster with the following command:\naws eks describe-cluster --name \u0026quot;eksworkshop-cf\u0026quot; --query cluster.status --output text When your cluster status is ACTIVE you can proceed.\n"
},
{
	"uri": "/tabs-example/tabs/launcheks/",
	"title": "Embedded tab content",
	"tags": [],
	"description": "",
	"content": "We start by initializing the Terraform state:\nterraform init We can now plan our deployment:\nterraform plan -var 'cluster-name=eksworkshop-tf' -var 'desired-capacity=3' -out eksworkshop-tf And if we want to apply that plan:\nterraform apply \u0026quot;eksworkshop-tf\u0026quot;  Applying the fresh terraform plan will take approximately 15 minutes\n "
},
{
	"uri": "/more_resources/",
	"title": "More Resources",
	"tags": [],
	"description": "",
	"content": "Discover more AWS resources for building and running your application on AWS:\nMore Workshops  Amazon ECS Workshop - Learn how to use Stelligent Mu to deploy a microservice architecture that runs in AWS Fargate Amazon Lightsail Workshop - If you are getting started with the cloud and looking for a way to run an extremely low cost environment Lightsail is perfect. Learn how to deploy to Amazon Lightsail with this workshop.  Tools for AWS Fargate and Amazon ECS  Containers on AWS - Learn common best-practices for running containers on AWS   fargate - Command line tool for interacting with AWS Fargate. With just a single command you can build, push, and launch your container in Fargate, orchestrated by ECS. Wonqa is a tool for spinning up disposable QA environments in AWS Fargate, with SSL enabled by Let\u0026rsquo;s Encrypt. More details about Wonqa on the Wonder Engineering blog coldbrew - Fantastic tool that provisions ECS infrastructure, builds and deploys your container, and connects your services to an application load balancer automatically. Has a great developer experience for day to day use mu - Automates everything relating to ECS devops and CI/CD. This framework lets you write a simple metadata file and it constructs all the infrastructure you need so that you can deploy to ECS by simply pushing to your Git repo.  Courses  Microservices with Docker, Flask, and React - Learn how to build, test, and deploy microservices powered by Docker, Flask, React Amazon ECS!  "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]